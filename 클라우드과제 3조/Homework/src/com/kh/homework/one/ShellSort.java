package com.kh.homework.one;

/*
 * 셸 정렬(Shell Sort)
 * 		-삽입정렬을 기반으로하여 배열을 특정 간격(gap)으로 집합을 만들어 삽입정렬을 수행하는 작업을
 * 		 반복하는 정렬. 정렬 후 간격을 줄어가며 최종적으로는 간격이 1이 될때까지 정렬한다.
 * 		-삽입 정렬에 비해 비교 연산과 교환 연산의 횟수를 줄일 수 있다는 것이 장점 
 * 
 * 		ex) {1, 4, 12, 16, 2, 6, 8, 41}
 * 		간격이 4 {1, 4, 8, 16, 2, 6, 12, 41}  // {1,2} {4,6} {8,12} {16,41}
 * 		간격이 2 {1, 4, 2, 6, 8, 16, 12, 41}  // {1,2,8,12} {4,6,16,41}
 * 		간격이 1 {1, 2, 4, 6, 8, 12, 16, 41}  
 * 			
 * 
 */
import java.util.Arrays;

public class ShellSort {

	/*
	 *  주어진 배열을 int[] arr = ~~ 형식으로 초기화 한 후 간격별로 정렬을 해야하므로
	 *  length 함수를 이용하고 for문을 이용하여 간격이 코드가 진행될수록 점점 줄어들게끔 작성한다.
	 *  2번 for문은 배열에서 첫번째로 시작하는 숫자를 호출하여 다음 for을 수행하며 3,4번 for문이 끝나면
	 *  ++연사자를 통해 배열에서 다음번째에 해당하는 숫자를 호출하여 다시 다음 for문을 수행한다.
	 *  3번과 4번 for문은 배열의 위치를 주어진 간격에 맞에 호출하여 기존 배열 순서가 오름차순이면 
	 *  그대로 진행하고 크기가 다르면 서로 위치를 바꾼다.
	 *  
	 *  다음 코드에서는 길이(length)가 16인 배열이 주어졌으므로 간격(gap)은 길이를 2로 나눈 8로 주어진다.
	 *  2번 for문에서 i의 수는 0으로 초기화하였고 조건식이 간격보다 작아 참(true)이므로 3번 for문을 진행한다.
	 *  3번 for문에서는 j= i(0) + gap(8)을 초기화하여 j값이 8이 되었고 조건식도 참이므로 4번 for문을 진행한다.
	 *  배열의 인덱스는 0부터 시작하기 때문에 i를 0으로 초기화하였고 j에는 간격을 더해줌으로서
	 *  4번 for문에서 i를 그대로 쓰지않고 다시 x라는 변수를 초기화하는 것은 3,4번 for문이 끝났을때 2번 for문에서
	 *  증감식을 수행해야하기 때문에 x라는 변수로 초기화 하였다.
	 *  이에따라 x=0이고 j는 8이기 때문에 다음 if문을 진행한다.
	 *  arr[x] > arr[j]라는 조건식에서 arr[0]은 배열에서 1, arr[8]은 배열에서 9라는 숫자이니 오름차순으로
	 *  4번 for문의 증감식을 수행하나 조건식에 맞지않아 3번 for문에서 증감식을 수행한다. 
	 *  증감 후 3번 for문에서 다시 조건식이 맞지않아 2번 for문의 증감식을 수행한다.
	 *  2번 for문에서 증감식이 진행되면 i=1이 되어 다시 3번 for문을 진행하여 if문에서 arr[1]과 arr[9]를 비교할 것이다.
	 *  
	 *  이는 {1, 8, 35, 67, 17, 4, 20, 23, 9, 36, 6, 19, 18, 3, 5, 11}의 배열을 간격인 8에 따라
	 *  {1,9} {8,36} {35,6} {67,19} {17,18} {4,3} {20,5} {23,11}로 간격별로 묶어 비교하는것과 같다.
	 *  {1,9} {8,36} {6,35} {19,67} {17,18} {3,4} {5,20} {11,23}으로 오름차순대로 위치를 바꾸며
	 *  {1, 8, 6, 19, 17, 3, 5, 11, 9, 36, 35, 67, 18, 4, 20, 23}으로 최종적으로 정렬한다.
	 *  
	 *  정렬 후 다시 간격이 나눠지므로 간격은 4가 되고 이때 정렬값은 다음과 같다.
	 *  {1, 3, 5, 11, 9, 4, 6, 19, 17, 8, 20, 23, 18, 36, 35, 67}
	 *  
	 *  최종적으로는 
	 *  {1, 3, 4, 5, 6, 8, 9, 11, 17, 18, 19, 20, 23, 35, 36, 67]}이 정렬되는 것이다.
	 */
	
	public void shellSort() {
   	 int[] arr = {1, 8, 35, 67, 17, 4, 20, 23, 9, 36, 6, 19, 18, 3, 5, 11};
        int len = arr.length;  					// len = 배열의 길이 = 16, 간격은 배열의 길이를 넘어서는 안된다.
 
        int temp = 0;
        int gap = len;
        for (; gap > 1;) {
        //1번 for문
            gap = (gap / 2) ; 					
            System.out.println("gap : " + gap);
         // 배열길이(length)의 절반 간격으로 정렬을 실행하며 아래 for문이 끝날시 다시 간격을 반으로 줄여서 정렬한다.
         // 최종적으로는 1이라는 간격이 나올때까지 반복한다
            
            for (int i = 0; i < gap; i++) {
         //2번 for문 												
           	 
                for (int j = i + gap; j < len; j = j + gap) {
         //3번 for문  	 											
              	 	
                    for (int x = i; x < j; x = x + gap) {
         //4번 for문       	 										
                   	 
                        if (arr[x] > arr[j]) { 				
                            temp = arr[x];
                            arr[x] = arr[j];
                            arr[j] = temp;
                         
                            // if 조건문을 사용하여 arr[x]가 arr[j] 보다 값이 크면 배열 자리를 바꿈
                           
                        }
                    }
                }
            }
 
            System.out.println(Arrays.toString(arr));
        }
   } 
	
	
	}

